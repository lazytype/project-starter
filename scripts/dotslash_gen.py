#!.venv/bin/python

import dotslash

binaries = [
  dotslash.binary(
    name="lefthook",
    version=dotslash.version(2, 0, 2),
    platforms=[
      dotslash.platform(
        name="macos-aarch64",
        path_template=t"lefthook_{dotslash.version.id}_MacOS_arm64",
        provider_url_template=t"https://github.com/evilmartians/lefthook/releases/download/v{dotslash.version.id}/lefthook_{dotslash.version.id}_MacOS_arm64.gz",
      )
    ],
  ),
  dotslash.binary(
    name="node",
    version=dotslash.version(25, 1, 0),
    platforms=[
      dotslash.platform(
        name="macos-aarch64",
        path_template=t"node-v{dotslash.version.id}-darwin-arm64/bin/node",
        provider_url_template=t"https://nodejs.org/download/release/latest-v{dotslash.version.major}.x/node-v{dotslash.version.id}-darwin-arm64.tar.xz",
      )
    ],
  ),
  dotslash.binary(
    name="oxfmt",
    version=dotslash.version(0, 8, 0),
    platforms=[
      dotslash.platform(
        name="macos-aarch64",
        path_template=t"package/oxfmt",
        provider_url_template=t"https://registry.npmjs.org/@oxfmt%2Fdarwin-arm64/-/darwin-arm64-{dotslash.version.id}.tgz",
      )
    ],
  ),
  dotslash.binary(
    name="pnpm",
    version=dotslash.version(10, 20, 0),
    platforms=[
      dotslash.platform(
        name="macos-aarch64",
        path_template=t"pnpm-macos-arm64",
        provider_url_template=t"https://github.com/pnpm/pnpm/releases/download/v{dotslash.version.id}/pnpm-macos-arm64",
      )
    ],
  ),
  dotslash.binary(
    name="ruff",
    version=dotslash.version(0, 14, 2),
    platforms=[
      dotslash.platform(
        name="macos-aarch64",
        path_template=t"ruff-aarch64-apple-darwin/ruff",
        provider_url_template=t"https://github.com/astral-sh/ruff/releases/download/{dotslash.version.id}/ruff-aarch64-apple-darwin.tar.gz",
      )
    ],
  ),
  dotslash.binary(
    name="shellcheck",
    version=dotslash.version(0, 11, 0),
    platforms=[
      dotslash.platform(
        name="macos-aarch64",
        path_template=t"shellcheck-v{dotslash.version.id}/shellcheck",
        provider_url_template=t"https://github.com/koalaman/shellcheck/releases/download/v{dotslash.version.id}/shellcheck-v{dotslash.version.id}.darwin.aarch64.tar.xz",
      )
    ],
  ),
  dotslash.binary(
    name="taplo",
    version=dotslash.version(0, 10, 0),
    platforms=[
      dotslash.platform(
        name="macos-aarch64",
        path_template=t"taplo-darwin-aarch64/taplo",
        provider_url_template=t"https://github.com/tamasfe/taplo/releases/download/{dotslash.version.id}/taplo-darwin-aarch64.gz",
      )
    ],
  ),
  dotslash.binary(
    name="uv",
    version=dotslash.version(0, 9, 5),
    platforms=[
      dotslash.platform(
        name="macos-aarch64",
        path_template=t"uv-aarch64-apple-darwin/uv",
        provider_url_template=t"https://github.com/astral-sh/uv/releases/download/{dotslash.version.id}/uv-aarch64-apple-darwin.tar.gz",
      )
    ],
  ),
  dotslash.binary(
    name="yamlfmt",
    version=dotslash.version(0, 20, 0),
    platforms=[
      dotslash.platform(
        name="macos-aarch64",
        path_template=t"yamlfmt",
        provider_url_template=t"https://github.com/google/yamlfmt/releases/download/v{dotslash.version.id}/yamlfmt_{dotslash.version.id}_Darwin_arm64.tar.gz",
      )
    ],
  ),
]


if __name__ == "__main__":
  import json
  import os
  import stat
  from concurrent.futures import ThreadPoolExecutor
  from pathlib import Path

  def write_binary(binary: dotslash.binary):
    binary_path = f"bin/{binary.name}"
    print(f"Generating {binary_path}")

    with open(binary_path, "w") as f:
      f.write("#!/usr/bin/env dotslash\n\n")
      f.write(
        f"// AUTOGENERATED: Run `{
          Path(__file__).relative_to(Path.cwd())
        }` to regenerate.\n\n"
      )
      json.dump(binary.json(), f, indent=2)
      f.write("\n")

    st = os.stat(binary_path)
    os.chmod(binary_path, st.st_mode | stat.S_IEXEC)

    print(f"Finished generating bin/{binary.name}")

  with ThreadPoolExecutor() as executor:
    list(executor.map(write_binary, binaries))
